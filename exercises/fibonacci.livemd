# Fibonacci Sequence

## Setup

```elixir
Mix.install([{:benchee, "~> 0.1"}])
```

## Fibonacci Sequence

The Fibonacci Sequence is a series of the numbers

```mermaid
flowchart LR
a[0] --> b[1] --> c[1] --> d[2] --> e[3] --> f[5] --> g[8] --> h[13] --> i[21] --> k[34] --> ...
```

<!-- livebook:{"break_markdown":true} -->

It's created by taking the sum of the previous to numbers to get the next number.

So $fib(n) = fib(n-1) + fib(n - 2)$

You'll notice that this is a recursive function.

In the Elixir cell below, implement the `Fibonacci.sequence/1` function which should return a fibonacci
sequence up to the $nth$ Element.

<!-- livebook:{"force_markdown":true} -->

```elixir
Fibonacci.sequence(0)
[0]

Fibonacci.sequence(4)
[0, 1, 1, 2, 3]
```

```elixir
defmodule Fibonacci do
  def sequence(n) do
  end
end
```

## Competition

In the Elixir cell below, create a `FastFib` module.
The `FastFib` module should be the most performant version of the fibonacci sequence that you can create.

```elixir
defmodule FastFib do
  def sequence(n) do
  end
end
```

Use Benchee to benchmark the performance of `FastFib` compared to `Fibonnaci`. The student in the 
class with the fastest `FastFib` time wins.

```elixir
Benchee.run(
  %{
    fast_fib: fn n -> FastFib.sequence(n) end
  },
  inputs: %{
    "1: small" => 10,
    "2: medium" => 30,
    "3: large" => 100
  }
)
```

```elixir

```

## Lucas Numbers

This exercise was inspired by [Exercism.io](https://exercism.org/tracks/elixir/exercises/lucas-numbers). It's
A fantastic platform for learning many languages including Elixir.

Lucas numbers are much like the fibonacci sequence where $fib(n) = fib(n - 1) + fib(n - 2)$
[Numberphile](https://www.youtube.com/watch?v=PeUbRXnbmms&ab_channel=Numberphile) has a great video that explains them in further detail,

Unlike Fibonacci, they start with a different initial 2 numbers.

Commonly it will start with `2, 1`, so:

```mermaid
flowchart
  2 --> 1 --> 3 --> 4 --> 7 --> 11 --> 18 --> 29 --> ...
```

In the Elixir cell below, implement the `LucasNumbers.generate/1` function that will generate
a lucas number sequence starting with `2, 1`.

Once you have a working solution, see if you can take advantage of **lazy evaluation** with `Stream`.

<!-- livebook:{"force_markdown": true} -->
```elixir
LucasNumbers.generate(1)
[1]

LucasNumbers.generate(2)
[2, 1]

LucasNumbers.generate(3)
[2, 1, 3]
```

```elixir

```
