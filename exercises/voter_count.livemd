# Voter Count

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Voter Count

You're creating a system for counting votes.

## Count Votes

In the Elixir cell below,

* Create a module `VoterCount` with a `count/2` function.
* `count/2` should accept a list of atoms that represent votes, and an atom.
* `count/2` should return an **integer** with the
  number of votes in the first parameter list that match the second parameter atom

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
VoterCount.count([:dogs, :dogs, :dogs, :cats], :dogs)
3

VoterCount.count([:dogs, :dogs, :dogs, :cats], :cats)
1

VoterCount.count([:apples, :oranges, :apples, :cats], :birds)
0
```

<!-- livebook:{"attrs":{"assertions":"assert VoterCount.count([], :test), \"Implement the `count` function.\"\n\nassert VoterCount.count([:dogs, :dogs, :dogs, :cats], :dogs) == 3,\n        \"failed on ([:dogs, :dogs, :dogs, :cats], :dogs)\"\n\nassert VoterCount.count([:dogs, :dogs, :dogs, :cats], :cats) == 1,\n        \"Failed on ([:dogs, :dogs, :dogs, :cats], :cats)\"\n\nassert VoterCount.count([:apples, :oranges, :apples, :cats], :birds) == 0,\n        \"Failed on ([:apples, :oranges, :apples, :cats], :birds)\"\n\nlist = Enum.map(1..10, fn _ -> Enum.random([:cat, :dog, :bird, :apple, :orange]) end)\nchoice = Enum.random([:cat, :dog, :bird, :apple, :orange])\nassert VoterCount.count(list, choice) == Enum.count(list, fn each -> each == choice end)","code":"defmodule VoterCount do\r\nend","solution":"defmodule VoterCount do\n  def count(votes, counted_vote), do: Enum.count(votes, &(&1 == counted_vote))\nend"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    defmodule VoterCount do
    end

    assert VoterCount.count([], :test), "Implement the `count` function."

    assert VoterCount.count([:dogs, :dogs, :dogs, :cats], :dogs) == 3,
           "failed on ([:dogs, :dogs, :dogs, :cats], :dogs)"

    assert VoterCount.count([:dogs, :dogs, :dogs, :cats], :cats) == 1,
           "Failed on ([:dogs, :dogs, :dogs, :cats], :cats)"

    assert VoterCount.count([:apples, :oranges, :apples, :cats], :birds) == 0,
           "Failed on ([:apples, :oranges, :apples, :cats], :birds)"

    list = Enum.map(1..10, fn _ -> Enum.random([:cat, :dog, :bird, :apple, :orange]) end)
    choice = Enum.random([:cat, :dog, :bird, :apple, :orange])
    assert VoterCount.count(list, choice) == Enum.count(list, fn each -> each == choice end)
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
defmodule VoterCount do
end
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish voter count exercise"
```

## Up Next

| Previous | Next |
| :------- | ----:|
| [Fizzbuzz](../exercises/fizzbuzz.livemd) | [Anagram](../exercises/anagram.livemd) |
