# Voter Count

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Voter Count

You're creating a system for counting votes.

## Count Votes

In the Elixir cell below,

* Create a module `VoterCount` with a `count/2` function.
* `count/2` should accept a list of atoms that represent votes, and an atom.
* `count/2` should return an **integer** with the
  number of votes in the first parameter list that match the second parameter atom

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
VoterCount.count([:dogs, :dogs, :dogs, :cats], :dogs)
3

VoterCount.count([:dogs, :dogs, :dogs, :cats], :cats)
1

VoterCount.count([:apples, :oranges, :apples, :cats], :birds)
0
```

```elixir
defmodule VoterCount do
  def count(votes, counted_vote) do
  end
end

Utils.feedback(:voter_count, VoterCount)
```
