# Mazes

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Setup

Ensure you run the `ea` command to evaluate all Elixir cells before starting. Alternatively,
you can evaluate the Elixir cells as you read.

## Overview

In this exercise, you're going to navigate a maze game.

Each maze is a deeply nested `map`.

If you navigate successfully, your answer will return `"Exit!"`

## The Atom Maze

In the Elixir cell below, use **map.key** notation to navigate the following maze. The maze is
in an `atom_maze` variable.

<!-- livebook:{"break_markdown":true} -->

![](images/atom_key_maze.png)

<!-- livebook:{"break_markdown":true} -->

Replace `nil` with your answer.

```elixir
atom_maze = %{
  south: %{
    west: %{
      south: %{
        east: %{
          south: %{
            east: %{
              south: "Exit!"
            }
          }
        }
      }
    }
  }
}

path = nil

Utils.feedback(:atom_maze, [atom_maze, path])
```

## The String Maze

In the Elixir cell below, use **map[key]** notation to get to the end of the following maze.
The maze is in a `string_maze` variable. Replace `nil` with your answer.

<!-- livebook:{"break_markdown":true} -->

![](images/string_maze_small.png)

```elixir
string_maze = %{
  "south" => %{
    "east" => %{
      "south" => %{
        "west" => %{
          "south" => %{
            "west" => %{
              "south" => %{
                "east" => %{
                  # using string_maze[key] syntax, access this deeply nested value.
                  "south" => "Exit!"
                }
              }
            }
          }
        }
      }
    }
  }
}

path = nil

Utils.feedback(:string_maze, [string_maze, path])
```

```elixir

```

## Create Your Own Maze

Generate a maze using the [Online Maze Generator](https://www.mazegenerator.net/). It should be
atleast a 5 * 5 in width and height.

* Create a deeply nested map to represent your `custom_maze`. It should have an `"Exit!"` value at the end.
* Use either **map[key]** notation
  or **map.key** notation to show how to navigate your maze `path`.
* BONUS: Use both atom keys and string keys in your `custom_maze`.

Replace `nil` with your answers below.

```elixir
custom_maze = nil

path = nil

Utils.feedback(:custom_maze, [custom_maze, nil])
```
