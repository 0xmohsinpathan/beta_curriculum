# Custom Enum With Reduce

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Custom Enum With Reduce

Reduce is an incredibly powerful tool you can leverage in a wide variety of circumstances.

If you'd like to learn more about reduce, there's an [excellent video](https://github.com/paulfioravanti/presentations/tree/master/everything_is_reduce) by Paul Fioravanti.

```elixir
Kino.YouTube.new("OQrfedclHfk")
```

We're going to use `Reduce` to re-implement several of the `Enum` module's functions to show
how it can be leveraged for many problems.

Implement the following `Enum` functions in this `CustomEnum` function. Each should use `Enum.reduce/3`
to accomplish the same functionality as the `Enum` module does.

* `each/2`
* `map/2`
* `filter/2`
* `sum/2`

```elixir
defmodule CustomEnum do
  def map(collection, function) do
  end

  def each(collection, function) do
  end

  def filter(collection, function) do
  end

  def sum(collection, function) do
  end
end

Utils.feedback(:custom_enum, CustomEnum)
```
