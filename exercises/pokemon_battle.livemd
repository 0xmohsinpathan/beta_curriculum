# Pokemon Battle

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Overview

You're going to create a pokemon battle game. If you're not familiar with pokemon, it's a game where
elemental creatures battle.

In this game, you're going to create a few pokemon, `charmander`, `squirtle`, and `bulbasaur`
then have them battle.

Some Elixir cells in this exercise will rely on previous solutions, so ensure that you
use the `ea` command to evaluate all cells. Otherwise, your prior code may be stale and result in bugs.

## Define a Pokemon Struct

In the Elixir cell below, define a `Pokemon` struct with the keys `:name`, `:type`, `health`, `:attack`, and `:speed`.

* `:name` will be a string.
* `:type` will be an atom of either `:grass`, `:water`, or `:fire`
* `:health` will be an integer with a default value of `20`
* `:attack` will be an integer with a default value of `5`
* `:speed` will be an integer

```elixir
defmodule Pokemon do
end

Utils.test(:define_pokemon_struct, Pokemon)
```

## Create 3 Pokemon

In the Elixir cell below, create 3 variables `charmander`, `bulbasaur`, and `squirtle`.
bind each variable to a `Pokemon` struct with the following stats.

```mermaid
classDiagram
    class Charmander {
        type: :fire
        speed: 20
    }
    class Bulbasaur {
        type: :grass
        speed: 15
    }
    class Squirtle {
        type: :water
        speed: 10
    }
```

Replace `nil` with your solution.

```elixir
charmander = nil

bulbasaur = nil

squirtle = nil

Utils.test(:pokemon_structs, [charmander, bulbasaur, squirtle])
```

## Pokemon Battle

Create a `PokemonBattle` module with the following functions:

### attack/2

Create an `attack/2` function which:

* accepts two pokemon structs as parameters
* return an updated version of the second pokemon struct.
* subtract the first pokemon's attack from the second pokemon's health.
* double the damage dealt if the pokemon has a type advantage.
* half the damage dealt if the pokemon has a type weakness.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
squirtle = %Pokemon{name: "Squirtle", type: :water, attack: 10}
charmander = %Pokemon{name: "Charmander", type: :fire, health: 20}

PokemonBattle.attack(squirtle, charmander)
%Pokemon{name: "Charmander", type: :fire, health: 0, speed: nil, attack: 5}
```

<!-- livebook:{"break_markdown":true} -->

Use the following type advantages to determine half or double damage.

* `:fire` beats `:grass`
* `:grass` beats `:water`
* `:water` beats `:fire`

<!-- livebook:{"break_markdown":true} -->

### battle/2

Create a `battle/2` function which:

* Accepts two pokemon structs as parameters.
* `attack/2` with the pokemon that has the higher speed. If their speed is the same attack the second pokemon first.
* if the attacked pokemon is still above 0 health, attack with the second pokemon.
* return two updated pokemon structs in a tuple.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
charmander = %Pokemon{name: "Charmander", type: :fire, speed: 20}
squirtle = %Pokemon{name: "Squirtle", type: :water, speed: 10}

PokemonBattle.battle(charmander, squirtle)
{
    %Pokemon{name: "Charmander", type: :fire, health: 10, speed: 20, attack: 5},
    %Pokemon{name: "Squirtle", type: :water, health: 17.5, speed: 10, attack: 5}
}

charizard = %Pokemon{name: "Charizard", type: :fire, speed: 20, attack: 20}
blastoise = %Pokemon{name: "Blastoise", type: :water, speed: 10, health: 10}

# the faster pokemon will not receive damage if the slower pokemon's health is 0.
PokemonBattle.battle(charizard, blastoise)
{
    %Pokemon{name: "Charizard", type: :fire, health: 20, speed: 20, attack: 20},
    %Pokemon{name: "Blastoise", type: :water, health: 0, speed: 10, attack: 5}
}
```

```elixir
defmodule PokemonBattle do
end

Utils.test(:pokemon_battle, [PokemonBattle, Pokemon])
```
