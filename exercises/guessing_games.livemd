# Guessing Games

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Guess the Word

In the Elixir cell below create a word guessing game.

* Bind a variable `guess` to the player's guess as a string.
* Bind a variable `answer` to the actual answer as a string.
* Check that the `guess` matches the answer. Bind `correct` to `"Correct!"`
  if the answer and guess match or `"Incorrect."` if they don't.

Run the code with a correct and incorrect `guess` to ensure
your code passes the tests.

```elixir
guess = nil
answer = nil

correct = nil

Utils.feedback(:guess_the_word, [guess, answer, correct])
```

## Guess the Number

In the Elixir cell below create a number guessing game.

* Bind a variable `guess` to the player's guess as an integer.
* Bind a variable `answer` to the actual answer as an integer.
* If `guess` equals `answer` bind `correct` to `"Correct!"`
* If `guess` is less than `answer` bind `correct` to `"Too low!"`
* If `guess` is greater than `answer` bind `correct` to `"Too high!"`

Run your code with an equal, smaller, and larger `guess` than the `answer` to ensure your
code passes all tests.

```elixir
guess = nil
answer = nil

correct = nil

Utils.feedback(:guess_the_number, [guess, answer, correct])
```
