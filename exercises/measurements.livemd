# Measurements

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Measurements

You are going to make a utility module for working with measurements.

### increased/1

Given a list of measurements as integers, determine how many have increased.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.increased([1, 1, 2, 3, 1])
2

Measurements.increased([1, 2, 1])
1
```

### increased_by/1

Given a list of measurements as integers, sum the amount they have increased by.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.increased_by([100, 150, 120, 130])
60

Measurements.increased_by([10, 20, 10, 40])
40
```

### increments/1

Given a list of measurements as integers, determine the increment between each integer.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.increments([100, 150, 120, 130])
[50, -30, 10]

Measurements.increments([10, 20, 10, 40])
[10, -10, 30]
```

### average/1

Find the average of a list of numbers. You can calculate average as $\frac{sum}{length}$.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.average([4, 5, 6])
5

Measurements.average([2, 10])
6
```

```elixir
defmodule Measurements do
  def increased(measurements) do
  end

  def increased_by(measurements) do
  end

  def increments(measurements) do
  end

  def average(measurements) do
  end
end

Utils.feedback(:measurements, Measurements)
```
