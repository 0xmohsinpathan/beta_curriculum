# Measurements

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Measurements

You are going to make a utility module for working with measurements.

### increased/1

Given a list of measurements as integers, determine how many have increased.
Each positive change since the previous integer in the list should count as an increase.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.increased([1, 1, 2, 3, 1])
2

Measurements.increased([1, 2, 1])
1

Measurements.increased([3, 1, 2])
1
```

### increased_by/1

Given a list of measurements as integers, sum the amount they have increased by.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.increased_by([100, 150, 120, 130])
60

Measurements.increased_by([10, 20, 10, 40])
40
```

### increments/1

Given a list of measurements as integers, determine the increment between each integer.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.increments([100, 150, 120, 130])
[50, -30, 10]

Measurements.increments([10, 20, 10, 40])
[10, -10, 30]
```

### average/1

Find the average of a list of numbers. You can calculate average as $\frac{sum}{length}$.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
Measurements.average([4, 5, 6])
5

Measurements.average([2, 10])
6
```

<!-- livebook:{"attrs":{"assertions":"list = Utils.Factory.integers()\n\nassert measurements.increased([1, 1]), \"Implement the `increased` function.\"\nassert measurements.increased([1, 2, 1]) == 1\nassert measurements.increased([3, 1, 2]) == 1, \"Ensure you count each positive change.\"\nassert measurements.increased([1, 1, 2, 3, 1]) == 2\n\nassert measurements.increased(list) == Utils.Solutions.Measurements.increased(list),\n        \"`increased/1 failed when called with #{inspect(list)}\"\n\nassert measurements.increased_by([1, 1]), \"Implement the `increased_by` function.\"\nassert measurements.increased_by([100, 150, 120, 130]) == 60\nassert measurements.increased_by([10, 20, 10, 40]) == 40\n\nassert measurements.increased_by(list) == Utils.Solutions.Measurements.increased_by(list),\n        \"`increased_by/1 failed when called with #{inspect(list)}\"\n\nassert measurements.increments([1, 2]), \"Implement the `increments` function.\"\nassert measurements.increments([100, 150, 120, 130]) == [50, -30, 10]\nassert measurements.increments([10, 20, 10, 40]) == [10, -10, 30]\n\nassert measurements.increments(list) == Utils.Solutions.Measurements.increments(list),\n        \"`increments/1 failed when called with #{inspect(list)}\"\n\nassert measurements.average([1, 1]), \"Implement the `average` function.\"\nassert measurements.average([4, 5, 6]) == 5\nassert measurements.average([2, 10]) == 6\n\nassert measurements.average(list) == Utils.Solutions.Measurements.average(list),\n        \"`increments/1 failed when called with #{inspect(list)}\"","code":"defmodule Measurements do\r\n  def increments(measurements) do\r\n  end\r\n\r\n  def increased(measurements) do\r\n  end\r\n\r\n  def increased_by(measurements) do\r\n  end\r\n\r\n  def average(measurements) do\r\n  end\r\nend","solution":"defmodule Measurements do\n  def increments(measurements) do\n    measurements\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.map(fn [x, y] -> y - x end)\n  end\n\n  def increased(measurements) do\n    measurements\n    |> increments()\n    |> Enum.count(&(&1 > 0))\n  end\n\n  def increased_by(measurements) do\n    measurements\n    |> increments()\n    |> Enum.filter(&(&1 > 0))\n    |> Enum.sum()\n  end\n\n  def average(measurements) do\n    Enum.sum(measurements) / Enum.count(measurements)\n  end\nend"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    defmodule Measurements do
      def increments(measurements) do
      end

      def increased(measurements) do
      end

      def increased_by(measurements) do
      end

      def average(measurements) do
      end
    end

    list = Utils.Factory.integers()

    assert measurements.increased([1, 1]), "Implement the `increased` function."
    assert measurements.increased([1, 2, 1]) == 1
    assert measurements.increased([3, 1, 2]) == 1, "Ensure you count each positive change."
    assert measurements.increased([1, 1, 2, 3, 1]) == 2

    assert measurements.increased(list) == Utils.Solutions.Measurements.increased(list),
           "`increased/1 failed when called with #{inspect(list)}"

    assert measurements.increased_by([1, 1]), "Implement the `increased_by` function."
    assert measurements.increased_by([100, 150, 120, 130]) == 60
    assert measurements.increased_by([10, 20, 10, 40]) == 40

    assert measurements.increased_by(list) == Utils.Solutions.Measurements.increased_by(list),
           "`increased_by/1 failed when called with #{inspect(list)}"

    assert measurements.increments([1, 2]), "Implement the `increments` function."
    assert measurements.increments([100, 150, 120, 130]) == [50, -30, 10]
    assert measurements.increments([10, 20, 10, 40]) == [10, -10, 30]

    assert measurements.increments(list) == Utils.Solutions.Measurements.increments(list),
           "`increments/1 failed when called with #{inspect(list)}"

    assert measurements.average([1, 1]), "Implement the `average` function."
    assert measurements.average([4, 5, 6]) == 5
    assert measurements.average([2, 10]) == 6

    assert measurements.average(list) == Utils.Solutions.Measurements.average(list),
           "`increments/1 failed when called with #{inspect(list)}"
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
defmodule Measurements do
  def increments(measurements) do
  end

  def increased(measurements) do
  end

  def increased_by(measurements) do
  end

  def average(measurements) do
  end
end
```
