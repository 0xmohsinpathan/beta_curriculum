# Bottles Of Soda

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Bottles of Soda

In the Elixir cell below create a module `BottlesOfSoda` with a function `on_the_wall/0`.

It should return a list with the following lyrics from `99` to `0`.
Ensure you handle the special cases for `2`, `1` and `0`.

<!-- livebook:{"force_markdown":true} -->

```elixir
BottlesOfSoda.on_the_wall()
[
"99 bottles of soda on the wall.
99 bottles of soda.
Take one down, pass it around.
98 bottles of soda on the wall.",

# ... and so on until you reach 2 where the grammar changes
"2 bottles of soda on the wall.
2 bottle of soda.
Take one down, pass it around.
1 bottle of soda on the wall.",

"1 bottle of soda on the wall.
1 bottle of soda.
Take one down, pass it around.
0 bottles of soda on the wall.",

"No more bottles of soda on the wall, no more bottles of soda.
Go to the store and buy some more, 99 bottles of soda on the wall."
]
```

```elixir
defmodule BottlesOfSoda do
  def on_the_wall do
  end
end

Utils.feedback(:bottles_of_soda, BottlesOfSoda)
```

## (Bonus) Bottles of ???

Make a new `BottlesOfBlank` module below with the following modifications.

* It should be able to accept a custom drink instead of `"soda"`.
* It should be able to accept a custom container instead of `"bottles"`.
* It should be able to accept a range of lyrics, and only return than range of lyrics.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
BottlesOfBlank.on_the_wall(3..0, "pop", "cans")
[
"3 cans of pop on the wall.
3 cans of pop.
Take one down, pass it around.
2 cans of pop on the wall.",

"2 cans of pop on the wall.
2 cans of pop.
Take one down, pass it around.
1 can of pop on the wall.",

"1 can of pop on the wall.
1 can of pop.
Take one down, pass it around.
0 cans of pop on the wall.",

"No more cans of pop on the wall, no more cans of pop.
Go to the store and buy some more, 99 cans of pop on the wall.
"
]
```

You can assume any container will be provided in it's plural form so a `"can"` will always
be passed into the function as `"cans"`. You only need to worry about containers whose plural form
ends in an `s`.

```elixir
defmodule BottlesOfBlank do
  def on_the_wall(range, beverage, container) do
  end
end

Utils.feedback(:bottles_of_blank, BottlesOfBlank)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish bottles of soda exercise"
```
