
## Lists

Lists are exactly what they sound like, they are lists of information.
Lists contain a sequence of any other data type, even themselves. Use square brackets `[]` to
create a list, and then separate each value with a comma `,`.

For example:

<!-- livebook:{"force_markdown":true} -->

```elixir
[1, 2, 3]                           # A list of integers
["a", "b", "c"]                     # A list of strings
[1, "b", 2]                         # A list of integers and strings
[1.2, true, false, 3123, "b^&e8*"]  # A list of floats, booleans, integers, and strings.
[]                                  # an empty list
[[], []]                            # a list of empty lists
[[1,2,3], [3,2,1]]                  # a list of lists with numbers
[[[]], [], [[], []]]                # deeply nested lists are valid, but often hard to read!
```

Lists are used to represent a collection of information. For example, a shopping list, a to-do list,
or a list of tags on an article. Values in a list are often referred to as `elements`.

### Indexes

An **index** is the position of an element in a list.

In programming, we count indexes starting at 0. Why? The short answer is,
it relates to how computer hardware works.

So take this example list.

<!-- livebook:{"force_markdown":true} -->

```elixir
["a", "b", "c"]
```

* `"a"` is at index `0`
* `"b"` is at index `1`
* `"c"` is at index `2`

### Your Turn

In the Elixir cell below, Create a list of your favourite foods as strings.

```elixir

```

## List Operators

List operators are useful for manipulating lists.

`++` allows you to add lists together.

```elixir
[1] ++ [2]
```

`--` allows you to subtract matching elements from a list.

```elixir
[1, 2, 3] -- [2, 3]
```

Unlike `Arithmetic Operators`, Lists do not follow the **BEDMAS** order of operations.

For example, what do you think the result of `[1, 2] ++ [1] -- [2]` should be?
Intuitively, you might think it would be an empty list `[]`. Because

<!-- livebook:{"force_markdown":true} -->

```elixir
[1, 2] -- [1] -- [2]
```

Becomes `[2]` when you subtract `[1]`

```elixir
[2] -- [2]
```

And then becomes `[]` when you subtract `[2]`

```elixir
[]
```

However, this is not the case. It's actually `[2]`. Why? because list operations evaluate from
right to left.

```elixir
[1, 2] -- [1] -- [2]
```

To avoid writing unintuitive code, you can either use brackets or assign values to variables to
break up the operations into steps using the match operator.

```elixir
([1, 2] -- [1]) -- [2]
```

```elixir
step1 = [1, 2]
step2 = step1 -- [1]
step2 -- [2]
```