# Match Operator
## Lesson

The match operator `=` is a way of assigning some data to a named `variable` that we can
use in place of that data throughout the rest of a program.

For example, you can store the number `9` in a variable named `my_variable` and then
use `my_variable` in place of 9 in the rest of the program.

```elixir
my_variable = 9

my_variable + 1
```

You can name a variable anything and then use that name throughout the rest of your program. In the example above, we use `my_variable`, but you can name a variable almost anything
as long as it doesn't break certain rules.

```elixir
a_different_variable_name = 9
a_different_variable_name + 1
```

Elixir calls the equals sign `=` a match operator, however in other programming
languages it's often called an assignment operator.

Elixir calls `=` the match operator because it can do more than assign values to a variable.
You'll learn more about that in future lessons. For now, this lesson will focus on using `=`
for assignment.

Why is storing a value in a variable useful? Imagine you have a program that runs several calculations on a number.
Let's say the number 8.

<!-- livebook:{"force_markdown":true} -->

```elixir
8 + 7 - 8 * 10 * 8 + 8
```

If we want to run these operations on the number 7 instead,
that suddenly becomes tedious to write.

A variable allows us to store a value and reuse it throughout the program.

<!-- livebook:{"force_markdown":true} -->

```elixir
my_number = 8
my_number + 7 - my_number * 10 * my_number + my_number
```

Now, if the desired value changes, you only need to change the variable's value.

<!-- livebook:{"force_markdown":true} -->

```elixir
my_number = 7
my_number + 7 - my_number * 10 * my_number + my_number
```

Variables are also helpful for making programs more clear. There's an anti-pattern
in programming called **magic values**. Magic values are values in a program that don't
have a name but are significant. You'll see **magic numbers** and **magic strings**
as common **anti-patterns**. An anti-pattern means something you should generally avoid doing
in your programs otherwise they become less clear and difficult to work with.

For example, imagine you're working on a program that accepts payments, and you find the following 
code

```elixir
100 * 1.12
```

What is 1.12? What is 100? This program would be a lot more clear if we used well-named variables.

<!-- livebook:{"force_markdown":true} -->

```elixir
item_cost = 100
tax_multiplier = 1.12
item_cost * tax_multiplier
```

Oh! So this is a program that takes the cost of an item and adds tax to it.

<!-- livebook:{"break_markdown":true} -->

### Naming Variables

Variable names must follow a few rules:

* must start with a letter.
* may contain valid alphanumeric characters.
* may end with predicates such as ! or ?.
* may not contain spaces.
* may not contain certain special characters such as $.

In addition to those enforced rules, it's conventional to separate words in a variable with an underscore `_` and only use lowercase letters.

If you break the rules for naming a variable, your program will crash with an error.
Much like naming atoms, memorizing the rules of naming variables is unimportant.
You will develop an intuition for if your variable name is valid or not through repeated exposure.
In practice, most variable names are made of only lowercase letters, underscores, and
sometimes numbers.

In general, you should give your variables meaningful names That improve the clarity of your code.

Short generic variable names are often difficult to decipher unless there's an established convention. For example, you'll often see the variable `i` to refer to an index.

Here are some example variable names that do not convey meaning.

<!-- livebook:{"force_markdown":true} -->

```elixir
t = "12:00"
c = 10
```

Instead, prefer verbose variable names to improve the clarity of your programs.

<!-- livebook:{"force_markdown":true} -->

```elixir
time = "12:00"
cost = 10
```

<!-- livebook:{"break_markdown":true} -->

### Unassigned Variables

Using an unassigned variable will crash your program.

```elixir
a_variable_that_has_not_been_assigned
```

If you look closely at the error, you'll see `undefined function a_variable_that_has_not_been_assigned/0 (there is no such import)`

When you use a variable name that hasn't been defined, Elixir assumes it's a function that has
not been defined. You haven't covered functions yet, but you will learn more about them in future lessons.

For now, it's enough to be familiar with this error so that if you see it, you'll know
you're using an unassigned variable.

### Your Turn

In the Elixir cell below, create a variable `hello` and assign it to the value `"world"`

```elixir

```
