# Floats

## Lesson

**Floats** refer to **floating-point numbers**.

Floats are used to represent decimal numbers in your program like `1.22`, `2.3`, `1.0`, and even `0.0`.
Just like for integers, floats are represented in binary. Any numbers to the right of the `.` uses
binary to represent decimal numbers.

<!-- livebook:{"force_markdown":true} -->

```elixir
0.0
```

The number of digits after the decimal point is known as the **precision** of the float.
For example, the precision of the float `1.2` is one. the precision of the float `1.22` is two.

You'll often use floats for representing percentages.
For example, you might want to represent a progress bar as a percentage.

Almost done!

<!-- livebook:{"force_markdown":true} -->

```elixir
99.4
```

Take great care when performing calculations with floats. 
Computers are limited to how precise they can be when representing floating-point numbers. 
Therefore, it's possible to have rounding errors.

```elixir
1.2 + 1.4
```

Evaluate the above and you'll notice that `1.2 + 1.4` is not `2.6`, but `2.5999999999999996`. 
Computerphile has an [excellent video on why](https://www.youtube.com/watch?v=PZRI1IfStY0&ab_channel=Computerphile).

It's for this reason it's not recommended to use floats for representing money, even though
it might seem intuitive to do so. Often you'll use integers to represent pennies, or some other contruct
specifically for money.

For our purposes, it's enough to be aware of this, without understanding the internal reasons for why this occurs.

## Drills

### Your Turn

In the Elixir cell below, enter some floating-point addition that returns an unexpected result.

```elixir

```
