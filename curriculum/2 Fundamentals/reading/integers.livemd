# Integers

## Integers

Integers are whole numbers, that also include negative numbers.

<!-- livebook:{"force_markdown":true} -->

```elixir
1
1023
1235460
-1
-100
-123512
```

Often you'll use integers for representing ages, days, years, cash values and more.

## Drills

### Maximum!

In the Elixir cell below, enter the biggest number you can think of.
If you've used any other programming language, you might be surprised! Integers
in Elixir are unbounded, meaning they have no maximum size.

Contrast that with a language like JavaScript which as a maximum integer size of `9007199254740991`
Elixir makes that look tiny!

```elixir

```

## Floats

**Floats** refer to **floating-point numbers**.

Floats are used to represent decimal numbers in your program like `1.22`, `2.3`, `1.0`, and even `0.0`.
Just like for integers, floats are represented in binary. Any numbers to the right of the `.` uses
binary to represent decimal numbers.

<!-- livebook:{"force_markdown":true} -->

```elixir
0.0
```

The number of digits after the decimal point is known as the **precision** of the float.
For example, the precision of the float `1.2` is one. the precision of the float `1.22` is two.

You'll often use floats for representing percentages.
For example, you might want to represent a progress bar as a percentage.

Almost done!

<!-- livebook:{"force_markdown":true} -->

```elixir
99.4
```

Take great care when performing calculations with floats. 
Computers are limited to how precise they can be when representing floating-point numbers. 
Therefore, it's possible to have rounding errors.

```elixir
1.2 + 1.4
```

Evaluate the above and you'll notice that `1.2 + 1.4` is not `2.6`, but `2.5999999999999996`. 
Computerphile has an [excellent video on why](https://www.youtube.com/watch?v=PZRI1IfStY0&ab_channel=Computerphile).

It's for this reason it's not recommended to use floats for representing money, even though
it might seem intuitive to do so. Often you'll use integers to represent pennies, or some other contruct
specifically for money.

For our purposes, it's enough to be aware of this, without understanding the internal reasons for why this occurs.

## Drills

### Your Turn

In the Elixir cell below, enter some floating-point addition that returns an unexpected result.

```elixir

```

## Arithmetic Operators

**Arithmetic** is a branch of mathematics. Essentially, we have operators to perform math.

To compute means to calculate, and that's why we write programs for **computers** (compute-ers).

Computers are just the latest step in a long line of
[mathematical machines](https://www.cs.uah.edu/~rcoleman/Common/History/History.html).

Using **arithmetic operators**, we can add `+`, subtract `-`, multiply `*` and divide `/`
We also have two special arithmetic operators, `div` for integer division and `rem` for
remainder.

Arithmetic operators work on both positive and negative integers and floats.

As previously mentioned in the lesson on floats, arithmetic operations on 
floats may result in floating-point errors.

### Addition

We can add numbers together with the plus `+` operator.

```Elixir
7 + 5
```

You can create entire equations by writing operators one after the other. So long as there is a
valid number (integer or float) on the operator's left and right hand side.

```elixir
4 + 3 + 2 + 1
```

The following code will crash because there is a dangling `+` operator. The error says `TokenMissingError` and `expression is incomplete` because we did not complete the mathematical expression. Whenever our code crashes, 
Elixir lets you know why with an error message.

```Elixir
2 +
```

You can also add floats together. However, that may result in floating-point errors, so it's best
to consider how precise you need to be when using floats in calculations. For example, it might be fine to 
be `0.02` off when calculating the width of a loading bar, but that's unacceptable when 
dealing with money.

```Elixir
1.2 + 1.4
```

You can also add floats and integers together.

```Elixir
1.2 + 4
```

```elixir
1.5 + 3.5 + 3 + 4.1 + 9
```

You can add negative and positive numbers together. 
Adding a negative number is the same as subtracting a positive number.

```elixir
8 + -9
```

Adding negative numbers might feel unintuitive, so it's rare
to write code like this, but it's useful to know you can.

<!-- livebook:{"break_markdown":true} -->

### Subtraction

We can subtract numbers with the minus `-` operator.

```Elixir
20 - 12
```

Like with addition, we can subtract floats and integers in any combination.

```Elixir
2.5 - 10
```

```Elixir
10 - 2.5 - 2.1
```

Floating-point errors can still occur.

```Elixir
1.3 - 1.2
```

Subtracting a negative is the same as adding a positive.

```Elixir
10 - -1
```

### Multiplication

Computers can efficiently multiply numbers. Under the hood, multiplication is just 
repeated additon. For example, `5 * 5` is `5 + 5 + 5 + 5 + 5`.

```Elixir
10 * 10
```

Multiplication can still result in floating-point errors.

```Elixir
2.2 * 2.1
```

You can multiply integers and floats both positive and negative in combination, like with addition and subtraction.

```elixir
2 * 30 * -2 * 1.4
```

### Division

We can also divide numbers. However, in Elixir there are two operators for division.
There is the `/` operator, which will always return a `float`, and the `div` operator, which will always return an `integer` (rounded down)

```Elixir
10 / 5
```

`div` is a function. You will learn more about functions in the future. 
For now, it's enough to know that `div` allows you to take two numbers and divide them.

```Elixir
div(10, 5)
```

Remember that `div` always rounds values down, so `1.5` becomes `1`.

```Elixir
div(3, 2)
```

There's a limit to how precise numbers can be in any computer program, so you should always
take care when using fractions that don't divide evenly. You can also run into the same 
floating-point calculation issues discussed in the floats lesson.

For example, notice that `10 / 3` is `3.3333333333333335`.

```Elixir
10 / 3
```

### BEDMAS

Calculations in Elixir follow the **BEDMAS** order of operations.
**BEDMAS** stands for brackets, exponents, division, multiplication, addition, subtraction.

That means that the following will evaluate 5 * 2 before 5 + 5.

<!-- livebook:{"force_markdown":true} -->

```elixir
5 + 5 * 2
```

So it first evaluates into

```Elixir
5 + 10
```

To get the result of 15.

```Elixir
15
```

Here's the same statement in an Elixir cell so that you can confirm the result is 15.

```elixir
5 + 5 * 2
```

Had it been evaluated from left to right, the result would have been 20.

<!-- livebook:{"force_markdown":true} -->

```elixir
5 + 5 * 2
10 * 2
20
```

You might notice the **B** in BEDMAS stands for brackets. You can use brackets in your program
override the order of operations.

<!-- livebook:{"force_markdown":true} -->

```elixir
(5 + 5) * 2
(10) * 2
20
```

Here's the same statement in an Elixir cell for you to confirm it's result is 20.

```elixir
(5 + 5) * 2
```

### Exponents

You also might notice the **E** in BEDMAS stands for exponents. The exponent operator in
Elixir is `**`.

That means that `10 ** 2` is 10 to the power of 2. Mathematically that's the same as `10 * 10`.

`10 ** 3` means `10 * 10 * 10`. If you would like a more in-depth explanation of exponents, there's
a [video by Khan Academy](https://www.youtube.com/watch?v=XZRQhkii0h0&ab_channel=KhanAcademy).

```Elixir
10 ** 2
```

### Remainder

A remainder is the amount left when you divide one number by the other.
For example, if you divide `5` by `2`, the remainder is `1`.

That's because `2` goes into `5` twice and leaves a remainder of `1`.

<!-- livebook:{"force_markdown":true} -->

```elixir
5 ~ 2
5 ~ 4
5 - 4 = remainder
5 - 4 = 1
```

If you're not familiar with remainders, here's a [video by Khan Academy](https://www.youtube.com/watch?v=P1qyjdh_sIw&ab_channel=KhanAcademy).

```Elixir
rem(5, 2)
```

In programming, we can use remainders to check if a number is evenly divisible by a number.
For example, a number is even if `rem(number, 2)` equals `0`.

```Elixir
rem(6, 2)
```

Where as an odd number will have a remainder of `1`.

```Elixir
rem(5, 2)
```

You'll also use remainders to cycle through numbers but then reset back to 0 when you hit
a limit. You don't need to know how to do this yet, but it will be helpful in future lessons.

````elixir
# TODO - Hide

Kino.animate(500, 0, fn i ->
  md = Kino.Markdown.new("
  ```elixir
  rem(#{i}, 10)
  #{rem(i, 10)}
  ```
  ")

  {:cont, md, i + 1}
end)
````

### Your turn

Add two massive numbers together that you couldn't do in your head.

```Elixir

```

Subtract two massive numbers together.

```Elixir

```

Multiply two massive numbers together.

```Elixir

```

Divide `223` by `71` using `/` to get a nice slice of **pi**.

```Elixir

```

Divide `100` by `3` using `div`.

```Elixir

```

Find `10` to the power of `214`.

```Elixir

```
