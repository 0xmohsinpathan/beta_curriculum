# Ranges

## Section

**Ranges** Ranges are useful for representing an ascending or descending sequence of numbers, without needing
to manually type each number in a list.

such as 1 to 10

<!-- livebook:{"force_markdown":true} -->

```elixir
1..10
```

```mermaid

flowchart LR
  1 --> 2 --> 3 --> 4 --> 5 --> 6 --> 7 --> 8 --> 9 --> 10
```

or 5 to -5.

<!-- livebook:{"force_markdown":true} -->

```elixir
5..-5
```

```mermaid
flowchart LR
  5 --> 4 --> 3 --> 2 --> 1 --> 0 --> -1 --> -2 --> -3 --> -4 --> -5
```

You can visualize a range as representing an ascending or descending list of integers.

On it's own, it might not seem like much. But ranges will be incredibly useful in future lessons.
We'll give you a taste of the future and show you how you can convert a range into a list.

Don't worry, we don't expect you to understand this code yet, but it's useful to understand
the relationship between `1..5` and `[1, 2, 3, 4, 5]`

```elixir
Enum.to_list(1..5)
```

Ranges can have a step. By default ranges have a step of `1` so the include each whole number 
between the left number before the `..` and the right number after the `..`.

You can override the default step of the range using `//`:

<!-- livebook:{"force_markdown":true} -->

```elixir
0..10//2
```

<!-- livebook:{"force_markdown":true} -->

```elixir
0 --> 2 --> 4 --> 6 --> 8 --> 10
```

That means the range `0..10//2` correlates to the list `[0, 2, 4, 6, 8, 10]`

Here's the same range converted into a list to help you visualize it. Once again, you will
learn more about what `Enum.to_list` is in a future lesson.

```elixir
Enum.to_list(0..10//2)
```

### Your Turn

In the Elixir cell below, Use `Enum.to_list` enter a range from `3` to `9` with a step of `3`. 
Replace `nil` with your answer.

```elixir

```
