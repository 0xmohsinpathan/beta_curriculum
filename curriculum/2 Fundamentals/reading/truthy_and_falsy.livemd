# Truthy and Falsy
## Operators
We also have operators for comparing **truthy** and **falsy** values.
What does that mean? It can get complicated in some programming languages, but in Elixir, every value other than `nil` and `false` is true.

`nil` and `false` are referred to as **falsy**.

All values other than `nil` and `false` are treated as `true` for the sake
of comparison.

Elixir provides the equivalent operators for `and`, `or`, and `not` for comparing truthy and
falsy values.

They are **and** (`&&`), **or** (`||`), and **not** `!`.

The `&&` operator allows you to check if two values are truthy and will return the right hand
value or `false`.

```elixir
false && 7
```

```elixir
8 && false
```

```elixir
7 && 8
```

```elixir
true && [hello: "world"]
```

The `||` operator checks if either value is truthy, and returns the first truthy value.

```Elixir
false || 7
```

```Elixir
7 || 8
```

```Elixir
true || 8
```

```Elixir
8 || true
```

The `!` (not) operator flips a `truthy` value to `false` or converts `false` values to `true`.

```Elixir
!1
```

```elixir
![hello: "world"]
```

```Elixir
!nil
```

```Elixir
!false
```

It's sometimes handy to use two `!` operators to convert values to a boolean.

```Elixir
!!"a truthy value"
```

While `&&`, `||`, and `!` work with booleans, it's conventional to use `and`, `or`, and `not`
for booleans, and `&&`, `||`, and `!` when you expect non-boolean values.

<!-- livebook:{"break_markdown":true} -->

### Falsy

Some programming languages have a wide variety of `falsy` values; however, Elixir does not.

In Elixir, only `nil` and `false` are false when used with boolean operators.

For example, JavaScript, another programming language, treats the number 0 as `false` when used,
but that's not the case in Elixir.

For those of you coming from other programming languages, caution is advised! You might
be used to `0 && 6` returning nothing, but in Elixir it returns `6`!

```elixir
0 && 6
```

### Your Turn

<!-- livebook:{"break_markdown":true} -->

In the Elixir cell below, enter the return value of `7 && 10`.

```Elixir

```

Enter the return value of `20 || "hello!"`

```Elixir

```

Enter the return value of `!0`

```Elixir

```
