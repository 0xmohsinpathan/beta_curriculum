# Persistence

## Persistance

To persist means to continue to exist.

We often want to store some information over a long period of time.
This might be some user information, or the particular state of the application.

For example, it would be pretty annoying if none of your emails were saved.

Persistence is necessary for creating almost every application, though some applications
purposely avoid persistence. Snapchat for example, intentionally avoids persisting messages.

### Short Term Persistence vs Long Term Persistence

We have a variety of methods to achieve persistence. We also have short term persistence, and long term
persistence.

Short term persistence is usually in memory. We might have some value that persists during the runtime of our program,
but as soon as the program ends, that value is lost.

For example, we can bind a variable in memory, then use it in further Elixir cells.

```elixir
i = 4
```

```elixir
i + 2
```

But when the program ends and you turn off your computer and open a different livebook file, `i` no longer exists.

However the `.livemd` file that powers this notebook is persisted. It's contents are saved. For example, you could
write some code in the following Elixir cell. Close this course and come back. Then notice that the cell still contains
the content that you wrote!

This is long term persistence and it's powered by a file system.

```elixir

```

## State

Simple variable values are stored in memory, but they have no state.

The variable `i` never changes value during the execution of the program. We can rebind it in a particular scope,
but we're not mutation the value so it's not truly a persisting state, it's more like binding a new variable value with the same name.

```elixir
i = 4
```

When talking about short term persistence, we generally think in terms of state.

For example, take a road light.

<!-- livebook:{"break_markdown":true} -->

![Road Light Image]()

<!-- livebook:{"break_markdown":true} -->

It cycles from <span style="color: green;">green</span> to <span style="color: yellow;">yellow</span> to <span style="color: red;">red</span>

In other words, it has some state of the light. This state changes, and the lights use that state to determine if
they should be on or off.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  subgraph Light
```

<!-- livebook:{"break_markdown":true} -->

Now that we have persistent data, we're going to encounter issues with the **state** of our
program. Let's say we're storing some state.

```mermaid
flowchart
    State --> 1[First State]
    Read --> State --First State--> Read
```

Then some other operation changes the state. Now when we read the state again, we recieve a different value.

```mermaid
flowchart
    set[Set State]a --Second State --> State
    Read --> State --Second State--> Read
```

This introduces an entire class of bugs with state. What if we set the state at the wrong time? or read the state too fast or slow?

For example, have you ever noticed that most issues with technology are fixed by turning them off and on again? That's because most
bugs occur when the program gets into a bad state that it can't get out of. 
By turning it off and on again you reset the state and solve the issue.

### Your Turn

Let's get practical. Here we have some `File` module functions that create files on your computer.
You're going to learn more about the `File` module in a future lesson. For now, trust that `write/2` creates a file with
some content, and `read/1` reads that content.

First we create a file. You can think of this file as storing the first state.

```elixir
File.write("data/some_file", "first")
```

Then we read that file. We return the first state.

```elixir
File.read("data/some_file")
```

Uncomment this line below and evaluate the Elixir cell. Notice that
Then we write to that same file again.

Notice that the return value of `File.read("data/some_file")` has changed. The same is true if
you re-evaluate the Elixir cell above.

```elixir
# File.write("data/some_file", "second")
File.read("data/some_file")
```

## File System Based Persistence

We can use a file system to persist information. For example, this entire course is saved in a series of `.livemd` files.

When working on real world projects, it's not generally recommended to use a file system for persisting long-term information unless you are
hacking together a small personal project, or you really know what you're doing.

Of course, there are plenty of times to use files. Most often, you'll read information from them. For example, your company might
be working on some sort of email newsletter. Your sales team has entered a list of emails into an excel spreadsheet document.

If there's only a handful of emails, you might manually copy paste these into your program, but if there are thousands, you'll have to
write some code to convert them into data that you can persist in your program.

## DBMS (Database Management System).

Generally speaking, we use a **Database** to store long term information in a program. The database is a separate layer in the program that
handles the complexity of storing information.

```mermaid
flowchart
    Program --> Database --> P[Persisted Data]
```

There are several different types of databases, here's a great primer by Linux Academy if you would like
an overview of databases in general [Database Primer](https://www.youtube.com/watch?v=Tk1t3WKK-ZY&ab_channel=LinuxAcademy).

This course will focus on **RDBMS** (Relational Database Management Systems). 
We'll provide a brief primer highlighting the core concepts you'll need to learn to work with DataBases in Elixir.
In later lessons, you'll get hands on experience to reinforce this overview.

Elixir applications generally default to using [PostgreSQL](https://www.postgresql.org/)
which is an open source relational database.

```mermaid
Program --> PostgreSQL --> P[Persisted Data]
```

Relational databases store data as a series of tables with relationships to eachother.

Think of a table like a spreadsheet with rows and columns. For example, when building out a photo app,
we might have a table of **users** and a table of **photos**. Each tables stores relevant information for
the user or photo.

```elixir
# TODO USER PHOTO TABLES
```

```mermaid
P[PostgreSQL]
U[Users]
PH[Photos]
P --> U
P --> PH
```

There is a relationship between the data, because some photos may belong to a user.
Typically, the photo will store a **foreign_key** which links to some user on the users table.

```mermaid
P[PostgreSQL]
U[Users]
PH[Users]
PH1[Picture Of The Daily Bugle]
U1[Peter Parker]

P --> U --> U1
P --> PH --> PH1 --foreign_key--> U1
```

### SQL (Structured Query Language)

We are then able to query the database for information using **SQL**. SQL
is a **Structured Query Language** specifically for working with SQL based databases.
We use **SQL** to communicate with **PostgreSQL**.

```mermaid
E[Elixir Program] --> SQL --> PostgreSQL --> P[Persisted Data]
```

For a primer on SQL, check out Danielle ThÃ©'s excellent video [What is SQL?](https://www.youtube.com/watch?v=27axs9dO7AE&ab_channel=DanielleTh%C3%A9)

For example, with SQL we could write a query to retrieve all of our users.

```sql
SELECT * from users
```

## Ecto

[Ecto](https://hexdocs.pm/ecto/Ecto.html) is a database library for Elixir. 
It comes with Phoenix, the framework for web development in Elixir.

Rather than deal directly with SQL in Elixir we generally use **Ecto** to interact with SQL databases.

```mermaid
E[Elixir Program] --> Ecto --> SQL --> PostgreSQL --> P[Persisted Data]
```

You will have the opportunity to learn more about Ecto and get hands on experience with databases throughout this course.
