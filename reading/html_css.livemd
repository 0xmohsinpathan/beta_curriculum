# HTML & CSS

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Overview

### HTML

Hyper Text Markup Language (HTML) is the language used to structure a web page and it's content.

HTML is composed of a series as HTML elements. For example, the following is an [HTML paragraph element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p).

```html
<p>hello world</p>
```

An HTML element generally includes an opening tag, content, then a closing tag.

<!-- livebook:{"break_markdown":true} -->

![](images/html_element_diagram_breakdown.png)

<!-- livebook:{"break_markdown":true} -->

Here is a brief overview of HTML by Fireship.

```elixir
Kino.YouTube.new("ok-plXXHlWw")
```

### CSS

Cascading Style Sheets (CSS) is the language used to style HTML web pages.

CSS rules apply in the order they are defined (hence, cascading). Each CSS rule has a **selector** to target HTML elements and semi-colon separated **declarations** of styles to apply.

For example, the following is a CSS rule would apply to all paragraph tags to make them green and bold.

```css
p {
  color: green;
  font-weight: bold;
}
```

Which would look like the following.

<!-- livebook:{"break_markdown":true} -->

<hr />

<p style="color: green; font-weight: bold;">
Hello, world!
</p>

<hr />

<!-- livebook:{"break_markdown":true} -->

Here's a breakdown of our CSS rule.

<!-- livebook:{"break_markdown":true} -->

![](images/css_breakdown.png)

<!-- livebook:{"break_markdown":true} -->

Here's another great overview video by Fireship.

```elixir
Kino.YouTube.new("OEV8gMkCHXQ")
```

## HTML Files

We can create `.html` files and open them in the browser. For example, create a file `hello.html` with the following content.

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Hello!</title>
  </head>
  <body>
    <p>Hello World!</h1>
  </body>
</html>
```

Open this file in the browser. You can click on the file in your file explorer to open it and see the following web page.

<!-- livebook:{"break_markdown":true} -->

![](images/hello_world_html.png)

<!-- livebook:{"break_markdown":true} -->

HTML documents are a nested series of HTML elements. See the [Anatomy of an HTML document](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics#anatomy_of_an_html_document) for a complete breakdown.

The `<head>` element contains metadata about the document such as the CSS styles. We can add a `<style>` element inside of the `<head>` element to write our CSS for the document. The `<body>` element contains the content of the web page.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

Replace the `hello.html` file with the following content.

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Hello!</title>
    <style>
      p {
        color: green;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <p>Hello World!</p>
  </body>
</html>
```

Now when we reload the browser, we should see the same web page but with bold green text.

<!-- livebook:{"break_markdown":true} -->

![](images/hello_world_html_green_text.png)

## CSS Files

Rather than defining our styles in a `<style>` tag, we can use external `.css` stylesheet files using the `<link>` tag.

```html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Hello!</title>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <p>Hello World!</p>
  </body>
</html>
```

Where a `styles.css` file in the same folder as `hello.html` contains the CSS.

```css
p {
  color: green;
  font-weight: bold;
}
```

A `.css` file can include another `.css` file using `@import`. This is helpful for organizing CSS files on larger projects.

```css
/* in styles.css */
@import 'otherstyles.css';
```

Where `otherstyles.css` is another stylesheet file in the same folder.

## CSS Selectors

CSS selectors use patterns to describe which HTML elements to apply a CSS rule to.

<!-- livebook:{"break_markdown":true} -->

### Element

We've already seen we can select all matching elements using the element tag name.

```css
p {
  color: green;
}
```

Which selects all matching elements.

```html
<p>This text will be green</p>
```

<!-- livebook:{"break_markdown":true} -->

### Class

By far the most commonly used selector is a class. We define a CSS class selecting using a `.` followed by the class name.

```css
.green-text {
  color: green;
}
```

The `.green-text` class will then apply to all elements with the `green-text` class attribute.
Attributes are key-value pairs which contain additional information about the element.

```html
<p class="green-text">This text will be green.</p>
<p class="green-text">This text will also be green.</p>
```

<!-- livebook:{"break_markdown":true} -->

### ID

IDs work similarly to class, however the `id` attribute should be unique for each element.
We define a CSS id using a `#` followed by the id name.

```css
#first-paragraph {
  color: green
}
```

The `#first-paragraph` id will then apply to the element with the `first-paragraph` id attribute.

```html
<p id="first-paragraph">This text will be green and bold.</p>
```

Keep in mind that browsers do not enforce unique IDs, however it is conventional and strongly encouraged.

<!-- livebook:{"break_markdown":true} -->

### Children

We select can all children of an element using a `>` symbol between selectors.

```css
.parent > .child {
  color: green;
}
```

Which selects all elements with the `.child` class that are direct children of the `.parent` class.

```html
<p class="parent">
  <p class="child">This text will be green.</p>
</p>

<p class="child">This text will NOT be green.</p>
```

<!-- livebook:{"break_markdown":true} -->

### Descendents

We select can all descendants of an element using a space between selectors.

```css
.parent .child {
  color: green;
}
```

Which selects all elements with the `.child` class that are direct children of the `.parent` class.

```html
<p class="parent">
  <p class="child">This text will be green and bold.</p>
</p>

<p class="child">This text will NOT be green and bold.</p>
```

<!-- livebook:{"break_markdown":true} -->

### Universal

The `*` symbol allows us to select all elements.

```css

* {
  color: blue
}
```

This would select all elements on the page.

```html
<p class="green-text">This text will be green and bold.</p>
<p class="green-text">This text will also be green and bold.</p>
```

<!-- livebook:{"break_markdown":true} -->

### Futher Selectors

See the [MDN CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors) documentation for a complete guide on CSS selectors.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

There is a fun website [CSS Diner](https://flukeout.github.io/) where you can practice using CSS selectors.

Play the CSS Diner game to familiarize yourself with selectors until you feel satisfied with your ability. We recommend you play up to the first eleven levels.

## HTML Elements

There are a massive number of HTML elements. We recommend the [MDN HTML Element reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) for a complete list.

HTML and CSS are deep topics, and as an Elixir focused course we aim to cover the most commonly used HTML elements, and the most commonly used CSS declarations and selectors.

<!-- livebook:{"break_markdown":true} -->

### Headings and Paragraphs

Heading elements represent six levels of section headings. Often, you will use headings
in descending order to create headings and subheadings.

```html
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
```

We've already seen the `<p>` tag for paragraph content. Each paragraph tag is automatically on a new line.

```html
<p>Paragraph</p>
```

We can also use the `<span>` tag to group inner text content (perhaps for styling) without creating a new line of text.

```html

<p>Outer content. <span>Inner content</span>
```

<!-- livebook:{"break_markdown":true} -->

### Lists

The ordered list `<ol>` and list item `<li>` tags create numbered lists.

```html
<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ol>
```

Which displays the following.

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ol>

If we want to use non-numbered lists with dashes, then we can use the unordered list `<ul>` tag instead.

```html
<ul>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ul>
```

Which displays the following.

<ul>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ul>

We can nest ordered and unordered lists inside one another to create nested lists.

```html
<ul>
  <li>a</li>
  <ol>
    <li>b</li>
    <ul>
      <li>c</li>
    </ul>
  </ol>
</ul>
```

Which displays the following.

<ul>
  <li>1</li>
  <ol>
    <li>1.1</li>
    <ul>
      <li>1.1.1</li>
    </ul>
  </ol>
</ul>

<!-- livebook:{"break_markdown":true} -->

### Images

The `<img>` tag embeds image content into a web page.

Images must include a `src` attribute for the local file or URL of the image to embed.

Images also include an optional `alt` attribute which is a text description of the image. The `alt` attribute is used for accessibility with screen readers, and also displays if the image fails to load.

Images can use a self-closing tag `<img/>` so they do not require an opening and closing tag. `<img></img>`. While both syntax styles are valid, it's generally recommended to use self-closing tags when possible.

Here are two `<img>` tag examples.

```html
<img src="https://picsum.photos/200" alt="a random lorem ipsum image">
<img src="broken url" alt="image purposefully not loaded">
```

The first loads an image from https://picsum.photos/200.

<img src="https://picsum.photos/200" alt="a random lorem ipsum image" />

The second displays the `alt` text when it fails to load.

<img src="broken url" alt="image purposefully not loaded" />

<!-- livebook:{"break_markdown":true} -->

### Anchors

The `<a>` anchor tag creates a link to another resource using the `href` attribute as the URL for the resource.

```html
<a href="https://www.google.com/search?q=cat+pictures">Cat Pictures Link</a>
```

Which displays the following.

<a href="https://www.google.com/search?q=cat+pictures">
Cat Pictures Link
</a>

<!-- livebook:{"break_markdown":true} -->

### Tables

We can organize information into rows and columns using tables. Each table starts with a table tag `<table>`. The table row `<tr>` and table data `<td>` tags can then create each row of data in the table.

```html
<table>
  <tr>
    <td>Column 1</td>
    <td>Column 2</td>
    <td>Column 3</td>
  </tr>
    <tr>
    <td>Cell 1</td>
    <td>Cell 2</td>
    <td>Cell 3</td>
  </tr>
</table>
```

We can use the table head `<thead>`, table body `<tbody>`, and table footer `<tfooter>` components to define the header, body, and footer sections of the table. The table header `<th>` element defines a styled header cell rather than the default table data `<td>` cell.

```html
<table>
  <thead>
    <tr>
      <th>Header 1</th>
      <th>Header 2</th>
      <th>Header 3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Cell 1</td>
      <td>Cell 2</td>
      <td>Cell 3</td>
    </tr>
  </tbody>
  <tfooter>
    <tr>
      <td>Footer 1</td>
      <td>Footer 2</td>
      <td>Footer 3</td>
    </tr>
  </tfooter>
</table>
```

The `colspan` attribute allows each cell take up a specified number of columns.

```html
<table>
  <thead>
    <tr>
      <th colspan="3">Full Header</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Cell 1</td>
      <td>Cell 2</td>
      <td>Cell 3</td>
   </tr>
  </tbody>
</table>
```

For a full guide to HTML tables, see the [MDN Table](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) documentation.

## Division

When we need to group content, we can use the `<div>` tag.

```html
<div>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</div>
```

The division tag is very generic and minimal. It does not convey any meaning about the content, and is typically used to group content together for the sake of styling.

It's a common issue to overused div tags. Instead, ideally we should use semantic tags instead of divs where possible.

## Semantic Tags

HTML includes a number of semantic tags that groups content and describes their meaning.

For an overview of semantic tags, we recommend this tutorial by The Net Ninja.

```elixir
Kino.YouTube.new("kGW8Al_cga4")
```

## CSS Cascading

**Cascading** Style Sheets apply rules in the order they are defined. You can have multiple CSS rules apply to several elements, and declarations in one rule can override another.

In the example below, the second rule overrides the first.

```css
p {
  color: red;
}

p {
  color: blue;
}
```

So all paragraph tags will be blue, not red.

```html
<p>This text will be blue, not red.</p>
```

Multiple non-conflicting rules can still apply to the same element. In the example below, the paragraph tag would be both bold, and green.

```css
p {
  color: green;
}

p {
  font-weight: bold;
}
```

## CSS Specificity

Different CSS selectors are prioritized over one another. We refer to this prioritization as specificity. The specificity of a CSS rule determines how it is prioritized over others.

For example, a class selector will always override a type selector, even when you consider cascading order.

```css
.my-class {
  color: blue
}

<!-- this rule will not apply -->
p {
  color: red;
}
```

So the following paragraph tag would be blue, not red.

```html
<p class="my-class">This text will be blue.</p>
```

See the [Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) documentation for more on how specificity is calculated.

For a more hands on guide, we recommend this video by whatsdev.

```elixir
Kino.YouTube.new("ndM8b-hnSwM")
```

We can also use the `!important` flag to forcefully set the rule to be prioritized. We should be careful when we use this flag, as it can make your CSS more difficult to reason about.

```css
.my-class {
  color: red
}

p {
  color: blue !important;
}
```

## Inspector

Many browsers allow you to inspect the HTML and CSS in a web page. The inspector is incredibly useful for understanding how projects work under the hood.

We will use Google Chrome for our examples, but similar functionality is available in Firefox and other browsers.

Consider [Downloading Google Chrome](https://www.google.com/intl/en_ca/chrome/) to follow along with inspector examples.

We can open the inspector by right clicking on any element in a web page and selecting **inspect**. From here we can view the **Elements** that make up the web page, and the **Styles** for those elements.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

Replace `hello.html` with following content.

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Hello!</title>
    <style>
        p {
            color: green;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <p>Hello World!</p>
</body>
</html>
```

Open `hello.html` in your browser, right click and select **inspect** on the paragraph tag.

<!-- livebook:{"break_markdown":true} -->

![](images/inspector-right-click.png)

<!-- livebook:{"break_markdown":true} -->

The **Elements** tab contains the HTML of the web page. Click the arrow to expand the `<body>` tag if it is not already open.

Select the paragraph tag and view the **Styles** tab. From here you can see the styles applied to the element.

<!-- livebook:{"break_markdown":true} -->

![](images/inspector-elements-example.png)

## CSS Box Model

The CSS box model is a box that wraps every HTML Element which we use for positioning and layout.

Every HTML Element has **content** containing text or child elements, internal **padding**, a **border**, and external **margin**.

```mermaid
flowchart
subgraph Margin
  subgraph Border
    subgraph Padding
      Content
    end
  end
end
```

We generally use `px` (pixels) or percent `%` for CSS measurements. For a full list of CSS Units see the [MDN CSS Values and Units](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths) documentation.

<!-- livebook:{"break_markdown":true} -->

### Padding and Margin

We can set the size of the padding, and margin properties. A single unit sets both the top, right, bottom, and left margin values.

```css
p {
  padding: 10px;
  margin: 10px;
}
```

Alternatively we can add up to four units in the order top, right, bottom, left.

```css
p {
  padding: 10px 20px 30px 40px;
}
```

Missing units will mirror the opposite unit. Here the top and bottom padding are `10px` and the right and padding are `5px`.

```css
p {
  padding: 10px 5px;
}
```

We can also set the top, right, bottom, and left margin or padding individually.

```css
p {
  padding-top: 10px;
  padding-right: 20px;
  padding-bottom: 30px;
  padding-left: 40px;

  margin-top: 10px;
  margin-right: 20px;
  margin-bottom: 30px;
  margin-left: 40px;
}
```

<!-- livebook:{"break_markdown":true} -->

### Border

A border has `border-width`, `border-color`, and `border-style` values.

```css
p {
  border-style: solid;
  border-width: 5px;
  border-color: black;
}
```

Or we can use the `border` property to set all three at once.

```css
p {
  border: 5px solid black;
}
```

See the [MDN Border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) documentation for further customization.

<!-- livebook:{"break_markdown":true} -->

### Height and Width

We can set the content `height` and `width` properties.

```css
p {
  height: 100px;
  width: 100px;
}
```

The total height and width of an element will be an addition of the margin, padding, border, and content. For example, the following class would be `140px` in height and width because `(10 * 2) + (10 * 2) + 100 = 140`.

```css
.class {
  height: 100px;
  width: 100px;
  padding: 10px;
  border: 10px solid black;
}
```

Alternatively, we can set the `box-sizing` property to `border-box` to include the border and padding in the elements total height and width. The content height and width are then automatically computed.

Now the elements total height and width including padding and border will be `100px`.

```css
.class {
  box-sizing: border-box;
  height: 100px;
  width: 100px;
  padding: 10px;
  border: 10px solid black;
}
```

<!-- livebook:{"break_markdown":true} -->

### Your Turn

Replace `hello.html` with the following content.

```html
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Hello!</title>
    <style>
        .box-model-example {
            width: 100px;
            height: 100px;
            padding: 10px;
            margin: 10px;
            border: solid black 10px;
        }
    </style>
</head>

<body>
    <p class="box-model-example">Content</p>
</body>

</html>
```

We can view the box model of any HTML element using the inspector. On chrome, inspect the `<p>` and go to the **Computed** section to see the computed box model.

<!-- livebook:{"break_markdown":true} -->

![](images/box-model-example.png)

<!-- livebook:{"break_markdown":true} -->

Hover your cursor over the `<p>` tag in the **Elements** section to see the full box model highlight on the page.

You can also hover your cursur over the box model in the **Computed** section to individually highlight the content, padding, border, and margin.

Notice that while we set the margin to be `10px` on all sides, the horizontal margin takes up the entire page. That's because by default the `<div>` element uses block positioning which we will cover in the next section.

## CSS Display

The **display** property determines how elements are displayed on the page. Elements have different default display properties.

For example, `<div>` is a **block** element. Block elements start on a new line and take up the whole width of the line.

Alternatively,`<span>` is an **inline** element. Inline elements exist on the same line as the previous element.

**inline** elements ignore height and width values. Instead of inline, we can use **inline-block** values to display an element on the same line, but apply width and height values.

Generally you can accomplish most common CSS behavior with block, inline, and inline-block elements. However there is a massive list of alternative display properties. See the [MDN Display](https://developer.mozilla.org/en-US/docs/Web/CSS/display) documentation for a full list of display values.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

Alter the `.box-model-example` class to use an inline div element instead of a block div element.

The `...` represents the rest of the CSS styles in `.box-model-example`.

```css
.box-model-example {
  display: inline;
  ...
}
```

Use the inspector to view to computed box model. Notice the height and width do not apply to inline elements.

<!-- livebook:{"break_markdown":true} -->

![](images/box-model-inline-example.png)

<!-- livebook:{"break_markdown":true} -->

Alter the display property again to use the inline-block value.

```css
.box-model-example {
  display: inline-box;
  ...
}
```

Use the inspector to view the computed box model. Notice the margin no longer takes up the entire line width.

<!-- livebook:{"break_markdown":true} -->

![](images/box-model-inline-block-example.png)

## CSS Position

The **position** property defines how an element positions itself on the page.

By default, HTML elements have a **static** position property where they flow normally on the page.

```css
p {
  position: static;
}
```

There are other useful positioning properties such as **relative**, **absolute**, **fixed** and **sticky**. We recommend the [MDN Position](https://developer.mozilla.org/en-US/docs/Web/CSS/position) documentation for a full guide.

We also recommend this video by Web Dev Simplified.

```elixir
Kino.YouTube.new("jx5jmI0UlXU")
```

## CSS Layout

CSS provides many tools for the layout of elements.

<!-- livebook:{"break_markdown":true} -->

### Center Align Element

We can use `margin: auto;` to horizontally center a block element inside of its container.
The element must have a smaller width than its parent container.

```css
.center {
  margin: auto;
  width: 100px;
}
```

<!-- livebook:{"break_markdown":true} -->

### Right and Left Align Element

We can use `position: absolute;` to right or left align an element to it's parent container.

```css
.right {
  position: absolute;
  right: 0;
}

.left {
  position: absolute;
  left: 0;
}
```

<!-- livebook:{"break_markdown":true} -->

### Align Text

We can left, right, and center align text using the `text-align` property.

```css
.right {
  text-align: right;
}

.center {
  text-align: center;
}

.left {
  text-align: left;
}
```

## CSS Colors

Certain CSS declarations accept a color-name as a value. For example, we've used to `color` property to set the color of some text content.

```css
p {
  color: red;
}
```

We're also able to set the background-color of an element.

```css
p {
  background-color: red;
}
```

For a full list of valid color names, see the [MDN Color Keywords](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) documentation.

We can also use the RGB (red, green, blue), RGBA (red, green, blue, alpha), HEX (hexadecimal value), or HSL (hue, light, saturation) representations for colors.

```css
<!-- color keyword -->
p {
  color: yellow;
}

<!-- HEX code -->
p {
  color: #FFFF00;
}

<!-- RGB -->
p {
  color: rgb(255,255,0);
}

<!-- HSL -->
p {
  color: hsl(60, 100%, 50%);
}
```

We recommend finding a browser extension that let's you find the color code for a color on a web page such as [Color Zilla](https://www.colorzilla.com/).

It's also handy to use a color selector such as the [Chrome Color Selector](https://www.google.com/search?q=color+selector) for picking colors and getting their code representation.

## Fonts

### Font Weight

We've already used the `font-weight` property which can set the font weight using a number or named weight.

```css
/* Keyword values */
font-weight: normal;
font-weight: bold;

/* Keyword values relative to the parent */
font-weight: lighter;
font-weight: bolder;

/* Numeric keyword values */
font-weight: 100;
font-weight: 200;
font-weight: 300;
font-weight: 400;// normal
font-weight: 500;
font-weight: 600;
font-weight: 700;// bold
font-weight: 800;
font-weight: 900;

/* https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#syntax */
```

<!-- livebook:{"break_markdown":true} -->

### Font-Size

We can also set the `font-size`. We can set the font-size using `px`, however pixels are a static value so this can cause issues depending on the screen size.

```css
p {
  font-size: 20px;
}
```

Instead, we generally recommend using a relative unit such as `em`. `1em` is equal to the current font-size. On browsers the default font-size is `16px`, and the user can change their font size if desired.

```css
p {
  font-size: 1.875em;
}

h1 {
  font-size: 3em;
}
```

<!-- livebook:{"break_markdown":true} -->

### Font-Family

We can change the font-family of an element.

There are many generic font families such as `serif`, `sans-serif`, `monospace`, and `cursive`.

```css
p {
  font-family: serif
}
```

We can also use a specific font if it is installed on the user's computer. If the font doesn't exist, then it will use any comma-separated fallbacks provided.

```css
p {
  font-family: Verdana, Arial, sans-serif;
}
```

Some fonts such as Arial and Verdana are safe, because most users should have them installed. However, often we want to use more custom fonts.

We can install custom fonts using [Google Fonts](https://fonts.google.com/) or other similar services.

For example, here's how we could use the [League Gothic](https://fonts.google.com/specimen/League+Gothic) font from Google Fonts. Google Fonts contains the `<link>` tag instructions for how to install the font.

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Hello!</title>
    <!-- The following installs the league gothic font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=League+Gothic&display=swap" rel="stylesheet">
    <style>
        p {
            font-family: 'League Gothic', sans-serif;
        }
    </style>
</head>

<body>
    <p>Hello World!</p>
</body>

</html>
```

## Further Reading

Armed with the fundamentals of HTML and CSS we're ready to build great looking websites. However, HTML and CSS are both massive topics and there is still much more to learn.

Consider the following resources a you continue your HTML and CSS learning journey.

* [MDN CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)
* [MDN HTML](https://developer.mozilla.org/en-US/docs/Web/HTML)

For experimenting with HTML and CSS we recommend sites such as [CodePen](https://codepen.io/) that make it easy to rapidly prototype HTML and CSS designs.
