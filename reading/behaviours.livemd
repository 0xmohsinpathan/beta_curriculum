# Behaviours
## Behaviours
Behaviors allow us create modules that all share a common pattern, but need different implementations.

You can define a behavior, and then two other modules will implement it.

```mermaid
flowchart
  A[Behavior] --> B[Module]
  A[Behavior] --> C[Module]
```

This enforces that both modules will implement a shared **application programming interface** 
or **API**. What is an API? Well, in this specific context the API is the set of 
public facing functions in a module. More generically an interface is the point at which two systems
interact. Since we're talking about systems for programming applications, we call it the application
programming interface.

To define a behavior, we start by defining a module. However instead of implementing
functions, we create `@callback` module attributes. These @callback module attributes 
define the signature of a function.

The signature of a function is the name, params, and expected return value, but not the implementation.
Essentially, it's the expected input, and output types in our program, but not the actual
implementation.

To define the expected return value we use `::` and then the data type we expect to return.
Elixir provides a set of types. You can see the full list of types in the [Typespecs](https://hexdocs.pm/elixir/1.13.2/typespecs.html#basic-types)
documentation. For now, we're going to use the `String.t()` type. Some other common
types are `atom()`, `boolean()`, `integer()`, `float()`, and `any()` if you don't require a specific output.

```elixir
defmodule Villain do
  @callback catchphrase() :: String.t()
end
```

Now a module can use the `Villain` behavior using the `@behavior` module attribute.
You'll notice that Elixir displays a warning because the `DarthVader` module is supposed
to implement a `catchphrase/0` function.

```elixir
defmodule DarthVader do
  @behaviour Villain
end
```

To remove the warning, we need to implement `my_function/0` and it should return a string.

```elixir
defmodule DarthVader do
  @behaviour Villain
  def catchphrase do
    "No, I am your father."
  end
end

DarthVader.catchphrase()
```

So, why use a behavior?

Primarily, behaviors ensure that any module that implements the behavior provides the expected set
of functions and that those functions match the expected function signatures.

Behaviors are another way to achieve `polymorphism`. We can define
a behavior, and then several different modules can implement that behavior. Behaviours
allow us to create "templates" for modules to ensure each module is consistent.

The **caller**, which is the place in the code where we call a module's function, can
then have a consistent experience between modules.

```mermaid
flowchart
  A --> C
  A --> D
  A --> E
  A --> F
  C --> B
  D --> B
  E --> B
  F --> B

  A[Caller]
  B[Behaviour]
  C[Implementation]
  D[Implementation]
  E[Implementation]
  F[Implementation]
```

If the behavior ever needs to change, we can modify the behavior, and know which modules
need to be updated thanks to the warnings Elixir provides.

There are other reasons such as [Dynamic Dispatching](https://elixir-lang.org/getting-started/typespecs-and-behaviours.html#dynamic-dispatch)
Which allow the caller to deal with a single module, and swap out the implementation.

```mermaid
flowchart
  A --> B
  B --> C
  B --> D
  B --> E
  B --> F
  A[Caller]
  B[Behaviour]
  C[Implementation]
  D[Implementation]
  E[Implementation]
  F[Implementation]
```

But that's beyond the scope of this lesson.

### Your Turn

In the Elixir cell below

* Create a behaviour called Pet. a Pet should have a `@callback` module attribute `speak/0`
  function that returns a string.
* Create a module `Dog` that uses the `Pet` behaviour.
* Implement a `speak` function in the `Dog` module that returns `"woof"`.

```elixir

```
