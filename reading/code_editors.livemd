# Code Editors

## Navigation

[Return Home](../start.livemd)

## Code Editors

Code editors are a software application designed specifically for editing code.

Some code editors are minimal and only edit code. Some
come with development tools that allow you to write, run, and test code
all from the same application. Generally we call these integrated development environments or **IDEs**.

There are a wide variety of code editors and IDEs, each with their own advantages.

## Visual Studio Code

We've chosen to recommend and support Visual Studio Code for this course. It's a fast and minimal code editor
that can be customized with extensions to add additional features.

It's open source and free, and the community is incredibly strong building new features and extensions all the time.

However, the primary reason it's the best choice for this course is the LiveShare feature.

Being a remote course comes with specific challenges. We cannot physically interact, so it's important to
be able to collaborate remotely. LiveShare allows us to collaboratively work on the same project by creating
a LiveShare session and having other developers join the session. Developers can then all view and edit the same project
simultaneously.

LiveShare even works through the [web version](https://vscode.dev/) of Visual Studio Code so you can quickly get coding on an unfamiliar or
temporary computer.

## Download Visual Studio Code

If you have not already, please download and install [Visual Studio Code](https://code.visualstudio.com/)

You may already have a preferred editor. While highly recommended, It's not mandatory that you use Visual Studio Code.
However, even if it doesn't become your daily code editor, we still recommend that you install it so that you can join and share
LiveShare sessions with your teacher and classmates.

### Open Visual Studio Code

You can either open Visual Studio Code manually or through the command line.
It takes some setup, but it's highly useful to be able to use the `code` command in your terminal to
open Visual Studio Code with a specific project.

Windows and Linux users should automatically have the `code` command available when they install Visual Studio Code.
Mac users can follow [these instructions](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line) to setup the `code` command.

Navigate to the curriculum folder using `cd` in your command line, and then run `code .` to open Visual Studio Code
in the current folder.

```
$ cd path/to/curriculum
$ code .
```

## Setup Recommended Extensions

We have a list of recommended extensions for this curriculum.

With the curriculum project open in visual studio code, open the Extensions tab and search for @recommended to see the Workspace Recommendations.

![](images/extensions_vsc.png)

<!-- livebook:{"break_markdown":true} -->

We recommend you install them all.

* **Phoenix Framework**: Syntax highlighting for Phoenix HEEx files.
* **Surface**: Syntax highlighting for Surface UI.
* **Elixir Test**: Useful commands for testing Elixir code.
* **ElixirLS**: General Elixir support for autocomplete, syntax highlighting, and more
* **Live Share**: Real-time collaborative development.
* **Livebook for VSCode**: Syntax highlighting for `.livemd` files.
* **Code Spell Checker**: Spell checking for source code. Useful for catching spelling errors.

## Explorer

The sidebar contains the Explorer tab

![](images/quick_open.png)

Open the Explorer tab to see all of the files and folders in a project. 
You can create new files and folders from this tab.

You can also open files to use them in your editor. Be careful not to edit any of the `.livemd`
files for this course unless directed to.

## Quick Open

For large projects, it quickly becomes tedius to search through files and folders.
Instead, you can use the **Quick Open** Command with <kbd>Ctrl</kbd>+<kbd>P</kbd>. Here
you can search for the name of a file and press <kbd>Enter</kbd> to view it in the editor.

<!-- livebook:{"break_markdown":true} -->

![](images/quick_open_search.png)

<!-- livebook:{"break_markdown":true} -->

It's important to be proficient with your code editor. There are an unlimited number of ways to be
more productive with your chosen code editor. We may include some advice for how to use the editor effectively,
but you are the best judge of which strategies are most effective.

With that said, we recommend you practice using Quick Open instead of the Explorer. Quick Open is a much faster solution
when working at scale, and you'll want to be proficient with it.

## Commands

Visual Studio Code has a number of useful commands. In addition many extensions add additional
commands. For example the **Elixir Test** extension allows you to run all Elixir tests for the current file.

Press <kbd>CTRL</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> to show all commands. You'll notice that it simply
uses Quick Open with a `>` symbol. You could also open Quick Open and then press `>`.

<!-- livebook:{"break_markdown":true} -->

![](images/show%20all%20commands.png)

<!-- livebook:{"break_markdown":true} -->

Many commands are bound to a short cut. Search for the `Preferences: Open Keyboard Shortcuts` command
to view and edit your shortcuts.

Specific shortcuts are generally beyond the scope of this course, but you may wish to research more
about useful shortcuts. You can also rebind any specific shortcut to customize your development experience.

<!-- livebook:{"break_markdown":true} -->

![](images/keyboard%20shortcuts.png)

## Integrated Terminal

Visual Studio Code comes with an integrated terminal so that you don't have to switch back
and forth between your editor and your command line.

To learn more about the Integrated Terminal you can read the [Integrated Terminal Documentation](https://code.visualstudio.com/docs/editor/integrated-terminal)

Open and close the integrated terminal with the `View: Toggle Terminal` command.

<!-- livebook:{"break_markdown":true} -->

![](images/view%20toggle%20terminal.png)

<!-- livebook:{"break_markdown":true} -->

Or you can use the <kbd>CTRL</kbd>+<kbd>\`</kbd> command.

<kbd>
\`
</kbd>

This may feel unergonomic for a command you use frequently. You may wish to rebind it
to a more comfortable shortcut.

### Multiple Terminals

From the integrated terminal you can manage multiple terminal windows.

This is useful if one terminal is busy performing some constant task like running an application.
For example, when you run this curriculum using the integrated terminal.

## Search



## Live Share

## Source Control
