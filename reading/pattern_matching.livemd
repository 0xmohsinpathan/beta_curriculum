# Pattern Matching
## Pattern Matching

In many other programming languages, the match operator `=` is called an assignment operator.

That makes sense, because so far you've only seen the `=` used to bind values to variables.
However Elixir actually uses **Pattern Matching** and binding instead of assignment.

What is pattern matching? Well rather than simply assigning values to variables, Elixir allows
you to bind variables on the left-hand side of the `=`. So long as it matches the same shape of the
right hand side of the `=`.

What does that mean? Well, we already know we can use `=` to bind the right hand side value to a variable.

```elixir
my_tuple = {1, 2, 3}
```

But did you know that you can also pattern match like this?

```elixir
{one, two, three} = {1, 2, 3}

two
```

You can create an expression on the left-hand side, and so long as it matches the shape
of the data on the right-hand side, you can extract and **match** on internal values.
Here's the same concept with a list

```elixir
[hero, secret_identity] = ["Spider Man", "Peter Parker"]

hero
```

This binds a new variable. If you aren't concerned about a value then you can use underscore `_`
to avoid binding it to a named variable.

```elixir
[_, secret_identity] = ["Spider Man", "Peter Parker"]

secret_identity
```

However, if the left hand side doesn't match the right hand side, then the code will crash with 
a **MatchError**.

```elixir
[name] = ["Spider Man", "Peter Parker"]
```

You can pattern match with any kind of data. So long as the left side matches the right side.

### Your Turn

Replace the variable with a **pattern match** expression to bind every internal value to a new
variable. The first exercise is filled out as an example. Choose any variable name.

```elixir
%{spiderman: identity1} = %{spiderman: "Peter Parker"}
```

```elixir
variable = ["A"]
```

```elixir
variable = {"A", "B"}
```

```elixir
variable = [hello: "world"]
```

## Pattern Matching with Case

Previously, we talked about how the case statement checks for equality.

```elixir
case "same" do
  "same" -> "this will return"
end
```

We're also able to use pattern matching for case statements. The first valid match will execute,
and you can use the variables you assign in the instruction.

```elixir
case [1, 2] do
  [] -> nil
  [one] -> one
  [one, two] -> one + two
end
```

### Your turn

Trigger the `"A"`, `"B"`, `"C"`, and `"D"` cases by changing `my_variable`.

```elixir
my_variable = []

case my_variable do
  [] -> nil
  [1, 2, 3] -> "A"
  %{one: _} -> "B"
  {1, 2, 3, %{hello: "world"}} -> "C"
  10 -> "D"
end
```

## Pattern Matching Multi-Clause Functions

You've already learned about using multi-clause functions with different arity's or different guards.
You can also create multi-clause functions with pattern matching.

```elixir
defmodule Greeter do
  def greet([name1, name2]) do
    "Hello, #{name1} and #{name2}"
  end

  def greet(%{name: name, identity: identity}) do
    "Hi #{identity} err..I mean #{name}"
  end

  def greet(name) do
    "Hello, #{name}"
  end
end
```

```elixir
Greeter.greet("Peter")
```

```elixir
Greeter.greet(["Peter", "Bruce"])
```

```elixir
Greeter.greet(%{name: "Batman", identity: "Bruce Wayne"})
```

## With

`with` is often used together with pattern matching to create "happy path" code.
It's useful whenever you have a series of cases or values that rely on eachother.

You can use with to create check some pre-conditions before executing instructions.

```mermaid
flowchart LR
  with --> 1
  1 --> 2
  2 --> 3
  3 --> 4
  1[pre-condition]
  2[pre-condition]
  3[pre-condition]
  4[instruction]
```

If any of the preconditions fail, the with statement will stop and return the value 
of the failed pre-condition.

```mermaid
flowchart LR
  1[pre-condition]
  2[pre-condition]
  3[pre-condition]
  4[instruction]
  with --> 1
  1 --> 2
  2 --> 3
  3 --> 4
  1 --> 5[failed pre-condition]
  2 --> 5
  3 --> 5
```

Alternatively, you can use `else` to handle the result of a failed precondition.

```mermaid
flowchart LR
  1[pre-condition]
  2[pre-condition]
  3[pre-condition]
  4[instruction]
  with --> 1
  1 --> 2
  2 --> 3
  3 --> 4
  1 --> 5[failed pre-condition]
  2 --> 5
  3 --> 5
  5 --> 6[else]
```

<!-- livebook:{"break_markdown":true} -->

Here's a minimal example `with` with a single pre-condition.

```elixir
is_admin = true

with true <- is_admin do
  "delete user"
end
```

The `with` statement checks is_admin. if `true`, it returns `"delete_user"`.
if any other value, it returns the value of is_admin.

```mermaid
flowchart LR
  with --> is_admin --> 3[delete user]
  is_admin --> 4[is_admin]
```

<!-- livebook:{"break_markdown":true} -->

`with` uses pattern maching to check if the left side of the `<-` matches the right side.
The example above is probably better served using a simple `if` statement, so let's make the example
more realistic and store `is_admin` in a boolean on a user map.

```elixir
user = %{is_admin: true}

with true <- user do
  "delete user"
end
```

Because `%{is_admin: true}` does not match `true`, the with statement returns `%{is_admin: true}`.
Let's correct that.

```elixir
user = %{is_admin: true}

with %{is_admin: true} <- user do
  "delete user"
end
```

Great! That's working. But this is still probably better handled by an `if` or `case` statement.

```elixir
user = %{is_admin: true}

if user === %{is_admin: true} do
  "delete user"
end
```

With is specifically really good for checking a series of pre-conditions.
Let's change our example to sending an email. To send an email we need to ensure:

* the sending user is an admin
* the recieving user has an email
* the email has a title and a body

We also need the `name` of the sender and reciever, and their emails.
If we were to use `case`, here's what that might look like. It's an unclear mess!

```elixir
sending_user = %{name: "Batman", email: "notbrucewayne@bat.net", is_admin: true}
recieving_user = %{name: "Robin", email: "boywonder@bat.net"}
email = %{title: "ROBIN!", body: "WE'RE OUT OF BAT SNACKS!"}

case sending_user do
  %{is_admin: true, name: sender_name, email: sender_email} ->
    case recieving_user do
      %{name: reciever_name, email: reciever_email} ->
        case email do
          %{title: title, body: body} ->
            "from #{sender_name}:#{sender_email} to #{reciever_name}:#{reciever_email} #{title}, #{body}"
        end
    end
end
```

Here's the same code rewritten using `with`. There's still some natural complexity, but it's 
a fair bit more clear.

```elixir
sending_user = %{name: "Batman", email: "notbrucewayne@bat.net", is_admin: true}
recieving_user = %{name: "Robin", email: "boywonder@bat.net"}
email = %{title: "ROBIN!", body: "WE'RE OUT OF BAT SNACKS!"}

with %{is_admin: true, name: sender_name, email: sender_email} <- sending_user,
     %{name: reciever_name, email: reciever_email} <- recieving_user,
     %{title: title, body: body} <- email do
  "from #{sender_name}:#{sender_email} to #{reciever_name}:#{reciever_email} #{title}, #{body}"
end
```

Right now, if a value doesn't match the precondition, it returns the value. for example,
if the sender is `nil` we return `nil`

```elixir
sending_user = nil
recieving_user = %{name: "Robin", email: "boywonder@bat.net"}
email = %{title: "ROBIN!", body: "WE'RE OUT OF BAT SNACKS!"}

with %{is_admin: true, name: sender_name, email: sender_email} <- sending_user,
     %{name: reciever_name, email: reciever_email} <- recieving_user,
     %{title: title, body: body} <- email do
  "from #{sender_name}:#{sender_email} to #{reciever_name}:#{reciever_email} #{title}, #{body}"
end
```

Sometimes it's useful to simply return the value, other times it's useful to handle the error. 
When we want to handle the error you can use `else`. The else block works like a `case`
statement here were we match on the return value of the pre-condition.

```elixir
sending_user = "batman"
recieving_user = %{name: "Robin", email: "boywonder@bat.net"}
email = %{title: "ROBIN!", body: "WE'RE OUT OF BAT SNACKS!"}

with %{is_admin: true, name: sender_name, email: sender_email} <- sending_user,
     %{name: reciever_name, email: reciever_email} <- recieving_user,
     %{title: title, body: body} <- email do
  "from #{sender_name}:#{sender_email} to #{reciever_name}:#{reciever_email} #{title}, #{body}"
else
  error -> "Email not sent because #{error} did not match expected format"
end
```

Much like a `case` statement, you can match on multiple cases to handle different errors.

```elixir
sending_user = %{name: "Joker", email: "joker@jokesonyou.haha"}
recieving_user = %{name: "Robin", email: "boywonder@bat.net"}
email = %{title: "ROBIN!", body: "WE'RE OUT OF BAT SNACKS!"}

with %{is_admin: true, name: sender_name, email: sender_email} <- sending_user,
     %{name: reciever_name, email: reciever_email} <- recieving_user,
     %{title: title, body: body} <- email do
  "from #{sender_name}:#{sender_email} to #{reciever_name}:#{reciever_email} #{title}, #{body}"
else
  %{name: "Joker"} -> "Get out of here Joker!"
  error -> "Email not sent because #{error} did not match expected format"
end
```

### Your turn

In the Elixir cell below

* create a variable scores that is a list `[5, 10, 20]`
* create a with statement that checks that `scores` has 3 elements and through pattern matching
  binds each to a variable.
* in the body of the with statement, add each number together.

```elixir

```
