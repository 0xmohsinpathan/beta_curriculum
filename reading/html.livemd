# HTML & CSS

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Overview

Hyper Text Markup Language (HTML) is the language used to structure a web page and it's content.
HTML is often used together with Cascading Style Sheets (CSS) which styles the web page.

HTML is composed of a series as HTML elements. For example, the following is an [HTML paragraph element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p).

```html
<p>hello world</p>
```

An HTML element generally includes an opening tag, content, then a closing tag.

<!-- livebook:{"break_markdown":true} -->

![](images/html_element_diagram_breakdown.png)

<!-- livebook:{"break_markdown":true} -->

Here is a brief overview of HTML by Fireship.

```elixir
Kino.YouTube.new("ok-plXXHlWw")
```

## Attributes

HTML elements may include attributes. Attributes are key-value pairs which contain additional information about the element that we do not want to include in the element. They

For example, we can use the `tooltip` attribute to include a tooltip on hover of the html element.

```html
<p title="This is a tooltip">Hello, world!</p>
```

Here's what the HTML above creates in a webpage. Hover your cursor over the text below to see the tooltip.

<!-- livebook:{"break_markdown":true} -->

<hr />

<p title="This is a tooltip">
Hello, world!
</p>

<hr />

## Nesting Elements

The content inside of an HTML element may be text, or other HTML elements. Nested elements are the **children** of their **parent** elements.

For example, here the [strong](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) element is a child of the paragraph element.

```html
<p>Hello, <strong>world!</strong></p>
```

<!-- livebook:{"break_markdown":true} -->

Which creates the following:

<!-- livebook:{"break_markdown":true} -->

<hr />

<p>
Hello, <strong>world!</strong>
</p>

<hr />

<!-- livebook:{"break_markdown":true} -->

Elements can have many elements as children.

## Self Closing Tags

Tags without children may be self closing. For example, the `<hr/>` [horizontal rule](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr) tag is often self closing.

```
<hr/>
```

This tag creates a line on the web page like so:

<hr />

## HTML Files

We can create `.html` files and open them in the browser. For example, create a file `hello.html` with the following content.

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Hello!</title>
  </head>
  <body>
    <h1>Hello World!</h1>
  </body>
</html>
```

Open this file in the browser. You can click on the file in your file explorer to open it and see the following web page.

<!-- livebook:{"break_markdown":true} -->

![](images/hello_world_html_document.png)

<!-- livebook:{"break_markdown":true} -->

The HTML document is broken down into the following elements.

* `<!DOCTYPE html>`: The [doctype](https://developer.mozilla.org/en-US/docs/Glossary/Doctype) ensures the HTML behaves correctly.
* `<html>`: The [html](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html) element represents the top level element of an HTML document. it is also referred to as the *root element*.
* `<head>`: The [head](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head) element contains meta data about the document.
* `<meta charset="utf-8">`: the [meta](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta) elements represents meta data. Specifically, this sets the character encoding of the web page to use [utf-8](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8).
* `<title>`: The [title](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title) element defines the document's title. Notice that the tab for `hello.html` in your browser should say `Hello!`.
* `<body>`: The [body](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body) element represents the content of an HTML document.

Then inside of the `<body>` tag is where we write the content of the web page.

We'll go over several of the most common HTML elements and their purpose.
As you follow through the list of elements, add them to your `hello.html` file to visualize them.

For a more complete list of all HTML elements, consider this online [HTML Cheatsheet](https://web.stanford.edu/group/csp/cs21/htmlcheatsheet.pdf) helpful or the [MDN HTML Elements Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element).

## Heading Section Elements

Heading elements represent six levels of section headings. Often, you will use headings
in descending order to create headings and subheadings.

```
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
```

<!-- livebook:{"break_markdown":true} -->

![](images/heading_elements.png)

<!-- livebook:{"break_markdown":true} -->

### Images

The [img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) tag embeds image content into a web page.

We use the following attributes for images.

* **src**: (required) the local file or URL of the image to use.
* **alt**: (recommended) a text description of the image highly useful for accessibility or if the resource cannot load.

<!-- livebook:{"break_markdown":true} -->

```html
<img src="https://picsum.photos/200" alt="a random lorem ipsum image">
<img src="broken url" alt="image purposefully not loaded">
```

<img src="https://picsum.photos/200" alt="a random lorem ipsum image" />

<img src="broken url" alt="image purposefully not loaded" />

## Lists

HTML includes unordered lists `<ul>` and ordered list `<ol>` tags. Unordered lists use bullet points by default and ordered lists uses numbers. The `<li>` tag defines an element inside of the list.

<!-- livebook:{"break_markdown":true} -->

```html
<ul>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ul>
```

<ul>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ul>

<!-- livebook:{"break_markdown":true} -->

```html
<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ol>
```

<ol>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ol>

<!-- livebook:{"break_markdown":true} -->

We can nest ordered and unordered lists inside one another to create nested lists.

```html
<ul>
  <li>a</li>
  <ol>
    <li>b</li>
    <ul>
      <li>c</li>
    </ul>
  </ol>
</ul>
```

<ul>
  <li>1</li>
  <ol>
    <li>1.1</li>
    <ul>
      <li>1.1.1</li>
    </ul>
  </ol>
</ul>

## Cascading Style Sheets

## Semantic HTML

## Inspecting HTML
